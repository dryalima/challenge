{
	"info": {
		"_postman_id": "33802668-195d-44e1-9671-969786f7a4e5",
		"name": "challenge_API_Tests",
		"description": "CI&T QA's Challenge\n\nHost: https://jsonplaceholder.typicode.com/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/users",
			"item": [
				{
					"name": "All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33ca918e-33ba-4391-9645-a0bdf3c5632d",
								"exec": [
									"if (responseCode.code === 200)",
									"{",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.test(\"Response time is less than 200ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(200)",
									"    })",
									"    ",
									"    pm.test(\"All users must have a name, username and email\", function () ",
									"    {",
									"        for (var a in jsonData)",
									"        { ",
									"            pm.expect(jsonData[a]).to.have.property(\"name\")",
									"            pm.expect(jsonData[a]).to.have.property(\"username\")",
									"            pm.expect(jsonData[a]).to.have.property(\"email\")",
									"        }",
									"    })",
									"    ",
									"    pm.test(\"Their Email must be valid\", function ()",
									"    {",
									"        var er = /^[a-zA-Z0-9][a-zA-Z0-9\\._-]+@([a-zA-Z0-9\\._-]+\\.)[a-zA-Z-0-9]{2,3}/;",
									"        ",
									"        for (var b in jsonData)",
									"        {",
									"            var email = jsonData[b].email;",
									"            er.test(email);",
									"        }",
									"    })",
									"    ",
									"    pm.test(\"Their Company catchphrase must have less than 50 characters\", function ()",
									"    {",
									"       for (var c in jsonData)",
									"       {",
									"            pm.expect(jsonData[c].company.catchPhrase.length).to.be.lessThan(50);   ",
									"       }",
									"    })",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						},
						"description": "- All users must have a name, username, and email.\r\n- Their Email must be valid.\r\n- Their Company catchphrase must have less than 50 characters."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/posts",
			"item": [
				{
					"name": "New Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0cbf320-913f-4356-9382-d1c514c4caf3",
								"exec": [
									"if (responseCode.code === 201)",
									"{",
									"    pm.test(\"Response time is less than 2000ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(2000)",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6346af78-6344-416d-b17d-b50015072d06",
								"exec": [
									"/*function getRandomIntInclusive(min, max) {",
									"  min = Math.ceil(min);",
									"  max = Math.floor(max);",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"var id;",
									"pm.environment.set(\"id\", getRandomIntInclusive(1, 9999))",
									"console.log(id);",
									"*/",
									"pm.sendRequest(\"https://jsonplaceholder.typicode.com/users\", function (err, response) {",
									"    console.log(response.json());",
									"    ",
									"    var jsonData = response.json();",
									"    var users_id = [];",
									"    var user_id;",
									"    ",
									"    for (var i in jsonData)",
									"    {",
									"       users_id.push(jsonData[i].id);",
									"       console.log(users_id);",
									"    }",
									"",
									"    pm.globals.set(\"user_id\", users_id[Math.floor(Math.random() * users_id.length)]); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{user_id}},\r\n    \"id\": \"\",\r\n    \"title\": \"title of the message\",\r\n    \"body\": \"body of the message\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Save a new post using a userId got by \"GET /users\" API."
					},
					"response": []
				},
				{
					"name": "New Post without Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0cbf320-913f-4356-9382-d1c514c4caf3",
								"exec": [
									"pm.test(\"Status code is error\", function () {",
									"    pm.response.to.not.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{user_id}},\r\n    \"id\": \"\",\r\n    \"body\": \"body of the message\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/posts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "When trying to save a new post without the title, API must return an error"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "21719a1b-9e52-42d9-8db4-419c87c6f4c2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "667b82a1-a51c-4428-8c15-f704b276817f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "baa8bcce-8ff8-490c-b540-833e70d285d0",
			"key": "baseURL",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}